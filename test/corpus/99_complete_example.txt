========================
schema.avdl
========================

/*
 * Header with license information.
 */
// Optional default namespace (if absent, the default namespace is the null namespace).
namespace org.apache.avro.test;
// Optional main schema definition; if used, the IDL file is equivalent to a .avsc file.
schema TestRecord;

/** Documentation for the enum type Kind */
@aliases(["org.foo.KindOf"])
enum Kind {
  FOO,
  BAR, // the bar enum value
  BAZ
} = FOO; // For schema evolution purposes, unmatched values do not throw an error, but are resolved to FOO.

/** MD5 hash; good enough to avoid most collisions, and smaller than (for example) SHA256. */
fixed MD5(16);

record TestRecord {
  /** Record name; has no intrinsic order */
  string @order("ignore") name;

  Kind @order("descending") kind;

  MD5 hash;

  /*
  Note that 'null' is the first union type. Just like .avsc / .avpr files, the default value must be of the first union type.
  */
  union { null, MD5 } /** Optional field */ @aliases(["hash"]) nullableHash = null;
  // Shorthand syntax; the null in this union is placed based on the default value (or first is there's no default).
  MD5? anotherNullableHash = null;

  array<long> arrayOfLongs;
}

---

(program
  (comment)
  (comment)
  (schema_declaration
    (namespace_statement
      (namespace_identifier)
    )
    (comment)
    (identifier)
  )
  (comment)
  (enum_declaration
    (anotation_statement
      (anotation_identifier)
      (anotation_arguments
        (literal_type (string))
      )
    )
    (identifier)
    (enum_block
      (enumeral)
      (enumeral) (comment)
      (enumeral)
    )
    (default_enumeral
      (enumeral)
    )
  )
  (comment)
  (comment)
  (fixed_declaration
    (call_expression
      (identifier)
      (argument_list
        (literal_type (number))
      )
    )
  )
  (record_declaration
    (identifier)
    (statement_block
      (comment)
      (field_declaration
        (primitive_type)
        (anotation_statement
          (anotation_identifier)
          (anotation_arguments
            (literal_type (string))
          )
        )
        (identifier)
      )
      (field_declaration
        (logical_type
          (identifier)
        )
        (anotation_statement
          (anotation_identifier)
          (anotation_arguments
            (literal_type (string))
          )
        )
        (identifier)
      )
      (field_declaration
        (logical_type (identifier))
        (identifier)
      )
      (comment)
      (field_declaration
        (union
          (primitive_type)
          (logical_type (identifier))
        )
        (comment)
        (anotation_statement
          (anotation_identifier)
          (anotation_arguments
            (literal_type (string))
          )
        )
        (default_value_expression
          (identifier)
          (value (literal_type (null)))
        )
      )
      (comment)
      (field_declaration
        (nullable
          (logical_type (identifier))
        )
        (default_value_expression
          (identifier)
          (value
            (literal_type (null))
          )
        )
      )
      (field_declaration
        (array
          (primitive_type)
        )
        (identifier)
      )
    )
  )
)

========================
protocol.avdl
========================

/*
 * Header with license information.
 */

/**
 * An example protocol in Avro IDL
 */
@namespace("org.apache.avro.test")
protocol Simple {
  // Import the example file above
  import idl "schema.avdl";

  /** Errors are records that can be thrown from a method */
  error TestError {
    string message;
  }

  string hello(string greeting);
  /** Return what was given. Demonstrates the use of backticks to name types/fields/messages/parameters after keywords */
  TestRecord echo(TestRecord `record`);
  int add(int arg1, int arg2);
  bytes echoBytes(bytes data);
  void `error`() throws TestError;
  // The oneway keyword forces the method to return null.
  void ping() oneway;
}

---

(program
  (comment)
  (comment)
  (protocol_declaration
    (anotation_statement
      (anotation_identifier)
      (anotation_arguments
        (literal_type (string))
      )
    )
    (identifier)
    (protocol_block
      (comment)
      (import_declaration
        (identifier)
        (literal_type (string))
      )
      (comment)
      (error_declaration
        (identifier)
        (statement_block
          (field_declaration
            (primitive_type)
            (identifier)
          )
        )
      )
      (rpc_message_declaration
        (return_value
          (primitive_type)
        )
        (identifier)
        (parameter_list
          (parameter
            (primitive_type)
            (identifier)
          )
        )
      )
      (comment)
      (rpc_message_declaration
        (return_value
          (logical_type
            (identifier)
          )
        )
        (identifier)
        (parameter_list
          (parameter
            (logical_type (identifier))
            (identifier)
          )
        )
      )
      (rpc_message_declaration
        (return_value
          (primitive_type)
        )
        (identifier)
        (parameter_list
          (parameter
            (primitive_type)
            (identifier)
          )
          (parameter
            (primitive_type)
            (identifier)
          )
        )
      )
      (rpc_message_declaration
        (return_value
          (primitive_type)
        )
        (identifier)
        (parameter_list
          (parameter
            (primitive_type)
            (identifier)
          )
        )
      )
      (rpc_message_declaration
        (return_value (void))
        (identifier)
        (parameter_list)
        (throw_statement
          (identifier)
        )
      )
      (comment)
      (rpc_message_declaration
        (return_value (void))
        (identifier)
        (parameter_list)
        (oneway)
      )
    )
  )
)
